plugins {
    id 'java'
    id 'maven-publish'
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'org.graalvm.buildtools.native' version '0.9.26'
}

group = 'at.userservice'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://artifactory-oss.prod.netflix.net/artifactory/maven-oss-candidates' }
}

ext {
    set('springCloudVersion', "2022.0.4")
}

dependencies {
    //Observability
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    //Dev-Tools
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

    //Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    //Specific Dependencies
    implementation("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")

    implementation 'org.springframework.boot:spring-boot-starter-webflux'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named('jar') {
    enabled = false
}

tasks.named('bootBuildImage') {
    builder = 'paketobuildpacks/builder:base'

    if(System.getenv('NATIVE_IMAGE_ENABLED') == 'enabled'){
        println("bootBuildImage is building a native image")
        environment = ['BP_NATIVE_IMAGE': 'true']
    }else {
        environment = ['BP_LIVE_RELOAD_ENABLED': 'true']
    }

    imageName = "${project.name}"

    docker {
        publishRegistry {
            username = project.findProperty("registryUsername")
            password = project.findProperty("registryToken")
            url = project.findProperty("registryUrl")
        }
    }
}

tasks.register('printVersionName') {
    println project.version
}